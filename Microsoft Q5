// Largest Divisible Subset

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
       vector<int> ans(nums.size(),1);
       if(nums.size()==1){
           return nums;
       }
       int n=nums.size();
       int a[n],a2[n],maximum=0,indu=0;
        for(int i=0;i<n;i++){
            a[i]=1;
            a2[i]=i;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0 && a[i]<1+a[j]){
                a[i]=1+a[j];
                a2[i]=j;
                }
            }
        }
        for(int i=0;i<n;i++){
            maximum=max(a[i],maximum);
            if(maximum==a[i]){
                indu=i;
            }
        }
        stack<int> s;
        for(int i=indu;i<n;){
            s.push(nums[i]);
            int y=i;
            i=a2[i];
            if(i==y)
            break;
        }
        vector<int> v;
        while(!s.empty()){
            v.push_back(s.top());
            s.pop();
        }
        return v;
        
    // Largest Divisible Subarray
    
    //    int max=0,ind=0;
    //    for(int i=1;i<nums.size();i++){
    //            if(nums[i]%nums[i-1]==0 || nums[i-1]%nums[i]==0){
    //                ans[i]=1+ans[i-1];
    //            }
    //            if(ans[i]>max){
    //                max=ans[i];
    //                ind=i;
    //            }
    //    }
    //    stack<int> s;
    //    int cnt=0;
    // for(int i=ind;cnt!=max;i--){
    //     s.push(nums[i]);
    //     cnt++;
    // }
    // vector<int> finalans;
    // while(!s.empty()){
    //     finalans.push_back(s.top());
    //     s.pop();
    // }
    // return finalans;
    }
};
